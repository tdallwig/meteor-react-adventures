{
  "name": "react-mounter",
  "version": "1.2.0",
  "description": "React Mounter lets you mount React components to DOM easily.",
  "repository": {
    "type": "git",
    "url": "https://github.com/kadirahq/react-mounter.git"
  },
  "license": "MIT",
  "options": {
    "mocha": "--require scripts/mocha_runner lib/**/__tests__/**/*.js"
  },
  "scripts": {
    "prepublish": ". ./scripts/prepublish.sh",
    "lint": "eslint ./lib",
    "lintfix": "eslint ./lib --fix",
    "testonly": "mocha $npm_package_options_mocha",
    "test": "npm run lint && npm run testonly"
  },
  "devDependencies": {
    "nodemon": "1.7.x",
    "mocha": "2.x.x",
    "chai": "3.x.x",
    "eslint": "1.7.x",
    "babel-eslint": "4.x.x",
    "eslint-plugin-babel": "2.x.x",
    "babel-cli": "6.x.x",
    "babel-core": "6.x.x",
    "babel-polyfill": "6.x.x",
    "babel-preset-es2015": "6.x.x",
    "babel-preset-stage-2": "6.x.x",
    "babel-plugin-transform-runtime": "6.x.x",
    "babel-preset-react": "6.x.x",
    "babel-plugin-react-require": "2.x.x",
    "react": "^15.0.0",
    "react-dom": "^15.0.0",
    "mock-require": "1.x.x",
    "sinon": "1.17.x",
    "eslint-plugin-react": "3.x.x"
  },
  "peerDependencies": {
    "react": "0.14.x || 15.x.x",
    "react-dom": "0.14.x || 15.x.x"
  },
  "dependencies": {
    "babel-runtime": "6.x.x",
    "domready": "1.x.x"
  },
  "readme": "# React Mounter\n\nReact Mounter lets you mount React components to DOM easily.\n\n> React Mounter supports Server Side Rendering when used with [FlowRouter](https://github.com/kadirahq/flow-router).\n\nNormally, when you are rendering a React Component to the DOM, you need to do following things basically,\n\n* Create a root DOM node as the root node for React\n* Wait for the DOM to load properly\n* Then render the component\n\nReact Mounter does all these for you. You just ask it to render a component.\n\nAdditionally, React Mounter can work as a simple Layout Manager where you can use with [Flow Router](https://github.com/kadirahq/flow-router).\n\n## Basic Usage\n\nInstall with:\n\n```\nnpm i --save react-mounter react react-dom\n```\n\n> `react` and `react-dom` are peerDependencies of `react-mounter`. So, you need to install them into your app manually.\n\nThen let's mount a component.\n\n```js\nimport React from 'react';\nimport {mount} from 'react-mounter';\n\nconst WelcomeComponent = ({name}) => (<p>Hello, {name}</p>);\n\nmount(WelcomeComponent, {name: 'Arunoda'});\n```\n\n## Using as a Layout Manager\n\nYou can user `react-mounter` as a layout Manager for Flow Router. Here's how to do it.\n\nLet's say we've a layout called MainLayout.\n\n```js\nconst MainLayout = ({content}) => (\n    <div>\n      <header>\n        This is our header\n      </header>\n      <main>\n        {content}\n      </main>\n    </div>\n);\n```\n\nNow let's try render to our `WelcomeComponent` into the `MainLayout`.\n\n```js\nmount(MainLayout, {\n  content: <WelcomeComponent name=\"Arunoda\" />\n});\n```\n\nThat's it.\n\n### To use the React Context\n\nIn order to use the React context, you need to render the `content` component inside the layout. So we need to pass a function instead of the React element. Here's how to do it.\n\n```js\nconst MainLayout = ({content}) => (\n    <div>\n      <header>\n        This is our header\n      </header>\n      <main>\n        {content()}\n      </main>\n    </div>\n);\n```\n\n> See, now content is a function.\n\nThen, we can pass the Welcome component like this:\n\n```js\nmount(MainLayout, {\n  content: () => (<WelcomeComponent name=\"Arunoda\" />)\n});\n```\n\n## Configure Root DOM node\n\nBy default React Mounter render our components into a DOM node called `react-root`. But, you can configure if by like below:\n\n```js\nconst {mount, withOptions} from `react-mounter`;\nconst mount2 = withOptions({\n    rootId: 'the-root',\n    rootProps: {'className': 'some-class-name'}\n}, mount);\n\nmount2(WelcomeComponent, {name: 'Arunoda'});\n```\n\n## Server Side Rendering (SSR)\n\nSSR is supported when used with [FlowRouter SSR](https://github.com/kadirahq/flow-router/tree/ssr). Checkout this [sample app](https://github.com/kadira-samples/meteor-data-and-react).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kadirahq/react-mounter/issues"
  },
  "_id": "react-mounter@1.2.0",
  "dist": {
    "shasum": "543c2b32b1c97f35d07a7895a30b52b1f3647292"
  },
  "_from": "react-mounter@",
  "_resolved": "https://registry.npmjs.org/react-mounter/-/react-mounter-1.2.0.tgz"
}
